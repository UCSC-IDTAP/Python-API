name: Automated Release

on:
  push:
    branches: [ main ]

jobs:
  release:
    runs-on: ubuntu-latest
    concurrency: release
    permissions:
      id-token: write    # OIDC for PyPI trusted publishing
      contents: write    # Create releases and tags
      actions: write     # Update workflow permissions if needed
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Needed for semantic-release to work properly
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml', '**/Pipfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            ${{ runner.os }}-
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]
          pip install build twine python-semantic-release toml
          
      - name: Validate version consistency
        run: |
          echo "Checking version consistency across files..."
          INIT_VERSION=$(python -c "import idtap; print(idtap.__version__)")
          TOML_VERSION=$(python -c "import toml; print(toml.load('pyproject.toml')['project']['version'])")
          
          echo "__init__.py version: $INIT_VERSION"
          echo "pyproject.toml version: $TOML_VERSION"
          
          if [ "$INIT_VERSION" != "$TOML_VERSION" ]; then
            echo "‚ùå Version mismatch detected!"
            echo "__init__.py: $INIT_VERSION"
            echo "pyproject.toml: $TOML_VERSION"
            exit 1
          fi
          echo "‚úÖ Versions are consistent"
          
      - name: Check if version bump is needed
        id: release-check
        run: |
          # Check if there are commits since last tag that would trigger a release
          echo "Checking for version bump..."
          NEW_VERSION=$(semantic-release version --print --no-commit --no-tag --no-push --no-vcs-release 2>/dev/null || echo "")
          if [ "$NEW_VERSION" != "" ]; then
            echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
            echo "should_release=true" >> $GITHUB_OUTPUT
            echo "New version will be: $NEW_VERSION"
          else
            echo "should_release=false" >> $GITHUB_OUTPUT
            echo "No version bump needed"
          fi
          
      - name: Run tests
        if: steps.release-check.outputs.should_release == 'true'
        run: |
          echo "Running tests before release..."
          pytest idtap/tests/ -m "not integration"
          
      - name: Configure git
        if: steps.release-check.outputs.should_release == 'true'
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          
      - name: Bump version and create release
        if: steps.release-check.outputs.should_release == 'true'
        run: |
          echo "Creating release for version: ${{ steps.release-check.outputs.new_version }}"
          semantic-release version
          
      - name: Build package
        if: steps.release-check.outputs.should_release == 'true'
        run: |
          echo "Building package..."
          python -m build
          
      - name: Publish to PyPI
        if: steps.release-check.outputs.should_release == 'true'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          # Using trusted publishing - no username/password needed
          # PyPI trusted publisher must be configured for this repo
          print-hash: true
          
      - name: Output release info
        if: steps.release-check.outputs.should_release == 'true'
        run: |
          echo "üéâ Successfully released version ${{ steps.release-check.outputs.new_version }}"
          echo "üì¶ Package published to PyPI: https://pypi.org/project/idtap/${{ steps.release-check.outputs.new_version }}/"
          echo "üè∑Ô∏è GitHub release created with tag: v${{ steps.release-check.outputs.new_version }}"